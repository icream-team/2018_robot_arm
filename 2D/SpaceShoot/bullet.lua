-- This file is for use with Corona(R) SDK
--
-- This file is automatically generated with PhysicsEdtior (http://physicseditor.de). Do not edit
--
-- Usage example:
--			local scaleFactor = 1.0
--			local physicsData = (require "shapedefs").physicsData(scaleFactor)
--			local shape = display.newImage("objectname.png")
--			physics.addBody( shape, physicsData:get("objectname") )
--

-- copy needed functions to local scope
local unpack = unpack
local pairs = pairs
local ipairs = ipairs

local M = {}

function M.physicsData(scale)
	local physics = { data =
	{

		["bullet_A"] = {




                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0,
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   6, -15  ,  8, -8  ,  -5, -17  ,  -3, -19  ,  3, -19  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0,
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -3, 19  ,  -8, 9  ,  -8, -8  ,  -5, -17  ,  8, -8  ,  8, 9  ,  3, 19  }
                    }



		}

		,
		["bullet_B"] = {




                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0,
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -7, 18  ,  -7, -11  ,  -3, -18  ,  3, -18  ,  7, -11  ,  7, 18  }
                    }



		}

		,
		["bullet_C"] = {




                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0,
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   15, 14  ,  21, -1  ,  21, 14  ,  19, 18  ,  16, 18  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0,
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -19, 18  ,  -21, 14  ,  -15, 14  ,  -16, 18  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0,
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   5, 7  ,  7, -17  ,  13, -14  ,  18, -8  ,  21, -1  ,  15, 14  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0,
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -21, 14  ,  -20, -4  ,  -11, 10  ,  -15, 14  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0,
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -20, -4  ,  -16, -11  ,  -7, -17  ,  7, -17  ,  -5, 7  ,  -11, 10  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0,
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   7, -17  ,  5, 7  ,  -5, 7  }
                    }



		}

	} }

        -- apply scale factor
        local s = scale or 1.0
        for bi,body in pairs(physics.data) do
                for fi,fixture in ipairs(body) do
                    if(fixture.shape) then
                        for ci,coordinate in ipairs(fixture.shape) do
                            fixture.shape[ci] = s * coordinate
                        end
                    else
                        fixture.radius = s * fixture.radius
                    end
                end
        end

	function physics:get(name)
		return unpack(self.data[name])
	end

	function physics:getFixtureId(name, index)
                return self.data[name][index].pe_fixture_id
	end

	return physics;
end

return M
